#!/usr/bin/env python3
import cv2
import os.path
import rclpy
import rclpy.node
from ament_index_python.packages import get_package_share_directory
from cv_bridge import CvBridge
from sensor_msgs.msg import CameraInfo
from sensor_msgs.msg import Image

class TestStereoPublisher(rclpy.node.Node):
    def __init__(self):
        super().__init__('stereo_test_publisher')

        # Publishers
        self.left_image_pub_ = self.create_publisher(
            Image, '~/left/image_raw', 1)
        self.right_image_pub_ = self.create_publisher(
            Image, '~/right/image_raw', 1)
        self.left_info_pub_ = self.create_publisher(
            CameraInfo, '~/left/camera_info', 1)
        self.right_info_pub_ = self.create_publisher(
            CameraInfo, '~/right/camera_info', 1)

        image_directory = os.path.join(
            get_package_share_directory('sgm_gpu'), 'test_data')
        left_image_path = os.path.join(image_directory, 'left.png')
        right_image_path = os.path.join(image_directory, 'right.png')

        # Load images
        cv_bridge = CvBridge()
        print(left_image_path)
        left_image = cv2.imread(left_image_path)
        right_image = cv2.imread(right_image_path)
        self.left_image_msg_ = cv_bridge.cv2_to_imgmsg(left_image)
        self.right_image_msg_ = cv_bridge.cv2_to_imgmsg(right_image)

        # Camera info is only used for set f and t value
        # to stereo_msgs/DisparityImage in sgm_gpu/SgmGpu component
        # So empty camera info is no problem to estimate disparity
        self.left_info_msg_ = CameraInfo()
        self.right_info_msg_ = CameraInfo()

        # Publish stereo image periodically
        self.create_timer(0.1, self.timer_callback)

    def timer_callback(self):
        # Set timestamp to messages
        timestamp = self.get_clock().now().to_msg()
        self.left_image_msg_.header.stamp = timestamp
        self.right_image_msg_.header.stamp = timestamp
        self.left_info_msg_.header.stamp = timestamp
        self.right_info_msg_.header.stamp = timestamp

        # Publish
        self.left_image_pub_.publish(self.left_image_msg_)
        self.right_image_pub_.publish(self.right_image_msg_)
        self.left_info_pub_.publish(self.left_info_msg_)
        self.right_info_pub_.publish(self.right_info_msg_)

def main(args=None):
    rclpy.init(args=args)
    stereo_publisher = TestStereoPublisher()

    rclpy.spin(stereo_publisher)

    stereo_publisher.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
